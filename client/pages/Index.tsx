import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { ThemeToggle } from "@/components/ui/theme-toggle";
import { ProductCard } from "@/components/ui/product-card";
import Header from "@/components/Header";
import { Container } from "@/components/Container";
import { Section } from "@/components/Section";
import { CategoryCard } from "@/components/CategoryCard";
import { Footer } from "@/components/Footer";
import { SignUpModal } from "@/components/ui/signup-modal";
import { LoginModal } from "@/components/ui/login-modal";
import { MobileMenu } from "@/components/ui/mobile-menu";
import { PrivacyModal } from "@/components/ui/privacy-modal";
import { TermsModal } from "@/components/ui/terms-modal";
import { CookiesModal } from "@/components/ui/cookies-modal";
import { FavoritesModal } from "@/components/ui/favorites-modal";
import { ViewAllButton } from "@/components/ui/view-all-button";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import {
  Calendar as CalendarIcon,
  Search,
  MapPin,
  Star,
  Users,
  Shield,
  Zap,
  Menu,
  ChevronRight,
  Car,
  Clock,
  Heart,
  MessageCircle,
} from "lucide-react";

export default function Index() {
  const [dateRange, setDateRange] = useState<{
    start: Date | undefined;
    end: Date | undefined;
  }>({
    start: undefined,
    end: undefined,
  });
  const [isDatePickerOpen, setIsDatePickerOpen] = useState(false);
  const [location, setLocation] = useState("");
  const [isSignUpModalOpen, setIsSignUpModalOpen] = useState(false);
  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isPrivacyModalOpen, setIsPrivacyModalOpen] = useState(false);
  const [isTermsModalOpen, setIsTermsModalOpen] = useState(false);
  const [isCookiesModalOpen, setIsCookiesModalOpen] = useState(false);
  const [isFavoritesModalOpen, setIsFavoritesModalOpen] = useState(false);
  const [favoritedListing, setFavoritedListing] = useState("");

  const handleDateSelect = (range: any) => {
    if (range?.from) {
      if (!dateRange.start || range.to) {
        // First click or both dates selected
        setDateRange({
          start: range.from,
          end: range.to,
        });
        // Don't close the picker automatically - let user click outside or toggle button
      }
    }
  };

  const handleFavorite = (listingName: string) => {
    setFavoritedListing(listingName);
    setIsFavoritesModalOpen(true);
  };

  const featuredCars = [
    {
      id: 1,
      name: "Riding Lawn Mower",
      price: "$45",
      rating: 4.9,
      image:
        "https://images.pexels.com/photos/6728933/pexels-photo-6728933.jpeg?w=400&h=250&fit=crop&auto=format",
      host: "Sarah",
      type: "Landscaping",
      distance: "2.3 miles",
    },
    {
      id: 2,
      name: "Designer Dress",
      price: "$35",
      rating: 4.8,
      image:
        "https://images.pexels.com/photos/5418926/pexels-photo-5418926.jpeg?w=400&h=250&fit=crop&auto=format",
      host: "Michael",
      type: "Clothing",
      distance: "1.8 miles",
    },
    {
      id: 3,
      name: "Professional Tool Set",
      price: "$25",
      rating: 4.7,
      image:
        "https://images.pexels.com/photos/6790973/pexels-photo-6790973.jpeg?w=400&h=250&fit=crop&auto=format",
      host: "Alex",
      type: "Tools",
      distance: "3.1 miles",
    },
  ];

  const categories = [
    { name: "Landscaping", icon: "ðŸŒ»", count: "500+" },
    { name: "Clothing", icon: "ðŸ‘—", count: "300+" },
    { name: "Tools", icon: "ðŸ”¨", count: "800+" },
    { name: "Tech", icon: "ðŸ’»", count: "150+" },
    { name: "Party", icon: "ðŸŽˆ", count: "200+" },
    { name: "Instruments", icon: "ðŸŽ·", count: "50+" },
  ];

  const benefits = [
    {
      icon: <Users className="h-8 w-8 text-primary" />,
      title: "Community-based",
      description:
        "Join us as we build the nation's largest peer-to-peer sharing network.",
    },
    {
      icon: <Shield className="h-8 w-8 text-primary" />,
      title: "Protected",
      description:
        "Every rental comes with insurance coverage for added peace of mind.",
    },
    {
      icon: <Star className="h-8 w-8 text-primary" />,
      title: "American-Made",
      description:
        "All profits generated by this platform are reinvested into the U.S. economy.",
    },
  ];

  return (
    <div className="min-h-screen bg-background">
      <style>{`
        .calendar-with-range-styling .rdp-day_range_middle {
          background-color: hsl(var(--primary)) !important;
          color: hsl(var(--primary-foreground)) !important;
        }

        .calendar-with-range-styling .rdp-day_range_start,
        .calendar-with-range-styling .rdp-day_range_end {
          background-color: hsl(var(--primary)) !important;
          color: hsl(var(--primary-foreground)) !important;
        }
      `}</style>
      <Header />

      {/* Hero Section */}
      <section className="relative min-h-[600px] flex items-center justify-center overflow-hidden">
        <div
          className="absolute inset-0 bg-gradient-to-r from-blue-600 to-purple-600"
          style={{
            backgroundImage:
              "url('https://images.pexels.com/photos/11727078/pexels-photo-11727078.jpeg?w=1200&h=600&fit=crop&auto=format')",
            backgroundSize: "cover",
            backgroundPosition: "center",
          }}
        >
          <div className="absolute inset-0 bg-black/40 dark:bg-black/60" />
        </div>

        <div className="relative z-10 text-center">
          <Container>
            <h1 className="text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6 leading-tight">
              Rent from
              <br />
              peers
            </h1>
            <p className="text-xl md:text-2xl text-white/90 mb-12 max-w-2xl mx-auto">
              Rent anything, anywhere
            </p>
          </Container>

          {/* Search Form */}
          <Card className="w-[70vw] mx-auto bg-white dark:bg-gray-800 shadow-2xl dark:shadow-gray-900/30">
            <CardContent className="p-6 mr-[3px]">
              <div className="grid grid-cols-1 md:grid-cols-[7fr_3fr] gap-4">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-muted-foreground" />
                  <Input
                    placeholder="What"
                    value={location}
                    onChange={(e) => setLocation(e.target.value)}
                    className="pl-10 h-14 text-lg md:text-lg border border-primary/20 dark:border-0 focus-visible:ring-1 dark:bg-gray-700 dark:placeholder:text-gray-400"
                  />
                </div>

                <div className="min-w-0">
                  <Popover
                    open={isDatePickerOpen}
                    onOpenChange={setIsDatePickerOpen}
                  >
                    <PopoverTrigger asChild>
                      <Button
                        variant="outline"
                        className={cn(
                          "h-14 text-lg justify-start text-left font-normal border border-primary/20 dark:border-0 focus-visible:ring-1 dark:bg-gray-700 dark:hover:bg-gray-600 dark:hover:text-white w-full",
                          !dateRange.start && "text-muted-foreground",
                        )}
                      >
                        <CalendarIcon className="mr-2 h-5 w-5" />
                        {dateRange.start && dateRange.end
                          ? `${format(dateRange.start, "MMM dd")} - ${format(dateRange.end, "MMM dd")}`
                          : dateRange.start
                            ? `${format(dateRange.start, "MMM dd")} - End`
                            : "When"}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <div className="calendar-with-range-styling">
                        <Calendar
                          mode="range"
                          selected={{
                            from: dateRange.start,
                            to: dateRange.end,
                          }}
                          onSelect={handleDateSelect}
                          disabled={(date) => date < new Date()}
                          initialFocus
                          numberOfMonths={1}
                        />
                      </div>
                      {dateRange.start && (
                        <div className="p-4 border-t">
                          <Button
                            variant="outline"
                            size="default"
                            onClick={() => {
                              setDateRange({
                                start: undefined,
                                end: undefined,
                              });
                            }}
                            className="w-full"
                          >
                            Clear selection
                          </Button>
                        </div>
                      )}
                    </PopoverContent>
                  </Popover>
                </div>
              </div>

              <Button
                size="lg"
                className="w-full mt-6 h-14 text-lg relative"
                onClick={() => {
                  if (dateRange.start && dateRange.end) {
                    localStorage.setItem(
                      "searchDateRange",
                      JSON.stringify({
                        start: dateRange.start,
                        end: dateRange.end,
                      }),
                    );
                  } else {
                    localStorage.removeItem("searchDateRange");
                  }
                  window.location.href = "/browse";
                }}
              >
                <span className="flex items-center justify-center w-full">
                  Search
                </span>
                <Search className="h-5 w-5 absolute left-1/2 -translate-x-16" />
              </Button>
            </CardContent>
          </Card>
        </div>
      </section>

      {/* Browse by Category */}
      <Section background="accent" padding="large">
        <h2 className="text-3xl md:text-4xl font-bold text-center mb-12">
          Browse by category
        </h2>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6">
          {categories.map((category, index) => (
            <CategoryCard
              key={index}
              icon={category.icon}
              name={category.name}
              count={category.count}
            />
          ))}
        </div>
      </Section>

      {/* Featured Cars */}
      <section className="py-16">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between mb-12">
            <h2 className="text-3xl md:text-4xl font-bold">
              Recently listed near you
            </h2>
            <ViewAllButton />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {featuredCars.map((car) => (
              <ProductCard
                key={car.id}
                id={car.id}
                name={car.name}
                price={car.price}
                rating={car.rating}
                image={car.image}
                host={car.host}
                type={car.type}
                distance={car.distance}
                onFavorite={handleFavorite}
                onClick={() => {
                  // Navigate to product details
                  window.location.href = `/product/${car.id}`;
                }}
              />
            ))}
          </div>
        </div>
      </section>

      {/* Benefits Section */}
      <section className="py-16 bg-accent/30 dark:bg-gray-800/30">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <h2 className="text-3xl md:text-4xl font-bold text-center mb-12">
            Why choose Trio?
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {benefits.map((benefit, index) => (
              <div key={index} className="text-center">
                <div className="flex justify-center mb-4">{benefit.icon}</div>
                <h3 className="text-xl font-semibold mb-3">{benefit.title}</h3>
                <p className="text-muted-foreground">{benefit.description}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-primary text-primary-foreground">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-6">
            Ready to get started?
          </h2>
          <p className="text-xl mb-8 opacity-90">
            Become a part of the community choosing Trio for their rental needs.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button
              size="lg"
              variant="secondary"
              className="text-lg px-8"
              asChild
            >
              <a href="/browse">Browse listings</a>
            </Button>
            <Button
              size="lg"
              variant="outline"
              className="text-lg px-8 bg-transparent border-white text-white hover:bg-white hover:text-primary"
              asChild
            >
              <a href="/upload">Rent your item</a>
            </Button>
          </div>
        </div>
      </section>

      <Footer />

      <LoginModal
        isOpen={isLoginModalOpen}
        onOpenChange={setIsLoginModalOpen}
        onSwitchToSignUp={() => {
          setIsLoginModalOpen(false);
          setIsSignUpModalOpen(true);
        }}
      />
      <SignUpModal
        isOpen={isSignUpModalOpen}
        onOpenChange={setIsSignUpModalOpen}
        onSwitchToLogin={() => {
          setIsSignUpModalOpen(false);
          setIsLoginModalOpen(true);
        }}
      />
      <MobileMenu
        isOpen={isMobileMenuOpen}
        onOpenChange={setIsMobileMenuOpen}
      />
      <PrivacyModal
        isOpen={isPrivacyModalOpen}
        onOpenChange={setIsPrivacyModalOpen}
      />
      <TermsModal
        isOpen={isTermsModalOpen}
        onOpenChange={setIsTermsModalOpen}
      />
      <CookiesModal
        isOpen={isCookiesModalOpen}
        onOpenChange={setIsCookiesModalOpen}
      />
      <FavoritesModal
        isOpen={isFavoritesModalOpen}
        onOpenChange={setIsFavoritesModalOpen}
        listingTitle={favoritedListing}
      />
    </div>
  );
}
